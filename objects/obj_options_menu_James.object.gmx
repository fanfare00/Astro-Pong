<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_popup_menu_James</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1002</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//default values for slider bar
topLeftX     = 385;
topLeftY     = 326;
bottomRightX = 810;
bottomRightY = 341;

ignoreLastMenuClick = false;

if  (mouse_check_button(mb_left))
{
    ignoreLastMenuClick = true;
}

//the width of the slider is tied to its left side which has to be global because the slider has to be
//redrawn as it was if the player accesses the options multiple times
difficultySliderRightX = global.difficultySliderLeftX+18;

musicSliderRightX = global.musicSliderLeftX+18;

SFXSliderRightX = global.SFXSliderLeftX+18;


//deactive underlying buttons
instance_deactivate_object(obj_button_James);


//create some new buttons, one to back out of the menu and 2 for the control inputs
var newButton;
    
 newButton = instance_create(511, 610, obj_button_James);
 with (newButton)
    {
        action = "done";
        bigButton = true;

        depth = -1003;
    }

 newButton = instance_create(485, 251, obj_button_James);
 with (newButton)
    {
        action = "keyboard";
        depth = -1003;
        type_Toggle = true;
        bigButton = false;
    }
    
newButton = instance_create(705, 251, obj_button_James);
 with (newButton)
    {
        action = "mouse";
        depth = -1003;
        type_Toggle = true;
        bigButton = false;
    }
   
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//make the slider out of 100 and assign it to a global variable
global.difficultyLevel = (global.difficultySliderLeftX - 382) / 2.15;
global.musicVolume     = (global.musicSliderLeftX - 382) / 4.3;
global.SFXVolume       = (global.SFXSliderLeftX - 382) / 4.3;

if (mouse_check_button_released(mb_left))
{
    ignoreLastMenuClick = false;
}

 
// if mouse is inside the difficulty slider rectangle
if (topLeftX-4 &lt; mouse_x) and (mouse_x &lt; bottomRightX+4) and (topLeftY-24 &lt; mouse_y) and (mouse_y &lt; bottomRightY+24)
{
    //show the select cursor
    window_set_cursor(cr_handpoint);
    
    //if player clicks, slide the rectangle
    if (mouse_check_button(mb_left))
    {
        global.difficultySliderLeftX = mouse_x;
        difficultySliderRightX = global.difficultySliderLeftX+18;
        
    } 
}
// if mouse is inside the music slider rectangle
if (topLeftX-4 &lt; mouse_x) and (mouse_x &lt; bottomRightX+4) and (topLeftY+80-24 &lt; mouse_y) and (mouse_y &lt; bottomRightY+80+24)
{
    
    window_set_cursor(cr_handpoint);

    if mouse_check_button(mb_left) and (ignoreLastMenuClick == false)
    {
        global.musicSliderLeftX = mouse_x;
        musicSliderRightX = global.musicSliderLeftX+18;
        
    } 
}
// if mouse is inside the sfx slider rectangle
if (topLeftX-4 &lt; mouse_x) and (mouse_x &lt; bottomRightX+4) and (topLeftY+160-24 &lt; mouse_y) and (mouse_y &lt; bottomRightY+160+24)
{
    window_set_cursor(cr_handpoint);
    if mouse_check_button_pressed(mb_left)
    {
        audio_play_sound(snd_laser_James, 1, false);
    }
    
    if mouse_check_button(mb_left)
    {
        global.SFXSliderLeftX = mouse_x;
        SFXSliderRightX = global.SFXSliderLeftX+18;
        
    } 
}

audio_music_gain(global.musicVolume * 0.01, 1);

audio_sound_gain(snd_laser_James, global.SFXVolume * 0.01, 1);
audio_sound_gain(snd_bounce_James, global.SFXVolume * 0.01, 1);
audio_sound_gain(snd_UFO_James, global.SFXVolume * 0.01, 1);
audio_sound_gain(snd_discharge_James, global.SFXVolume * 0.01, 1);
audio_sound_gain(snd_charging_up_James, global.SFXVolume * 0.01, 1);
audio_sound_gain(snd_asteroid_James, global.SFXVolume * 0.01, 1);
audio_sound_gain(snd_ding_loss_James, global.SFXVolume * 0.01, 1);
audio_sound_gain(snd_ding_win_James, global.SFXVolume * 0.01, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//the values here make no sense because its flipped on its side and scaled
//3 times to reduce transparency
draw_sprite_ext( spr_popup_menu_James, 0, 943, 29, 2.45, 2.6, -90, -1, 1 );
draw_sprite_ext( spr_popup_menu_James, 0, 943, 29, 2.45, 2.6, -90, -1, 1 );
draw_sprite_ext( spr_popup_menu_James, 0, 943, 29, 2.45, 2.6, -90, -1, 1 );




draw_set_alpha(0.75);


//difficulty slider bar

    //top left corner x , y   -  btm right x , y
draw_rectangle_color(topLeftX-2,       topLeftY-2,        bottomRightX+2,    bottomRightY+2,      c_purple, c_purple, c_purple, c_purple,  false);
draw_rectangle_color(topLeftX,         topLeftY,          bottomRightX,      bottomRightY,         bluish, bluish, bluish, bluish,  false);

//audio slider bar music
draw_rectangle_color(topLeftX-2,       topLeftY-2+80,     bottomRightX+2,    bottomRightY+2+80,     c_purple, c_purple, c_purple, c_purple,  false);
draw_rectangle_color(topLeftX,         topLeftY+80,       bottomRightX,      bottomRightY+80,       bluish, bluish, bluish, bluish,  false);

//audio slider bar sfx
draw_rectangle_color(topLeftX-2,       topLeftY-2+160,    bottomRightX+2,    bottomRightY+2+160,       c_purple, c_purple, c_purple, c_purple,  false);
draw_rectangle_color(topLeftX,         topLeftY+160,      bottomRightX,      bottomRightY+160,       bluish, bluish, bluish, bluish,  false);


draw_set_alpha(1);
        
        draw_set_color(c_lime)
        draw_text_transformed(600-185,335, "easier", 0.15, 0.15, 0);
        
        draw_set_color(c_maroon)
        draw_text_transformed(600+178,335, "harder", 0.15, 0.15, 0);



//difficulty slider
draw_rectangle_color(global.difficultySliderLeftX-2,   topLeftY-20,        difficultySliderRightX+2,    topLeftY+32,     c_maroon, c_maroon, c_maroon, c_maroon,  false);
draw_rectangle_color(global.difficultySliderLeftX,     topLeftY-18,        difficultySliderRightX,      topLeftY+30,     c_fuchsia, c_fuchsia, c_purple, c_purple,  false);

//audio slider music
draw_rectangle_color(global.musicSliderLeftX-2,   topLeftY+80-20,     musicSliderRightX+2,   topLeftY+80+32,    c_maroon, c_maroon, c_maroon, c_maroon,  false);
draw_rectangle_color(global.musicSliderLeftX,     topLeftY+80-18,     musicSliderRightX,     topLeftY+80+30,    c_fuchsia, c_fuchsia, c_purple, c_purple,  false);

//audio slider sfx
draw_rectangle_color(global.SFXSliderLeftX-2,   topLeftY+160-20,    SFXSliderRightX+2,   topLeftY+160+32,    c_maroon, c_maroon, c_maroon, c_maroon,  false);
draw_rectangle_color(global.SFXSliderLeftX,     topLeftY+160-18,    SFXSliderRightX,     topLeftY+160+30,    c_fuchsia, c_fuchsia, c_purple, c_purple,  false);









draw_set_halign(fa_right);
draw_set_valign(fa_center);

draw_set_color(c_fuchsia);
draw_set_font(fnt_menu_score_James);
draw_text_transformed(347, 256, "controls", 0.3, 0.3, 0);
draw_text_transformed(347, 336, "difficulty", 0.3, 0.3, 0);
draw_text_transformed(347, 416, "music vol.", 0.3, 0.3, 0);
draw_text_transformed(347, 500, "sfx vol.", 0.3, 0.3, 0);

draw_set_alpha(0.9);
draw_set_color(c_lime);
draw_set_halign(fa_center);
draw_set_font(fnt_names);
draw_text_transformed(510,148, "Options", 1.35,1.35,0);






//control configuration

//mouse button keyboard button





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//reactivate non options menu buttons
instance_activate_object(obj_button_James);

with (obj_button_James)
{
    if (action == "done") or (type_Toggle == true)
    { 
         instance_destroy();
     }
}

instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>165,165</point>
  </PhysicsShapePoints>
</object>
