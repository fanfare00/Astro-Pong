<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///play theme, initialize power level system and timer



seconds = 0;
minutes = 0;



chargeMeter = 0;

global.playerScore = 0;
global.enemyScore = 0;


powerLevel = 240;
enemyPowerLevel = 784;


//variables for drawing the logo animation of a ball moving in an ellipcal pattern
centerX = 469;
centerY = 198;
ellipseStep = 0;
radAngle = 0.959931089;
minorAxis = 35;
majorAxis = 97;
logoAnimationX = 0;
logoAnimationY = 0;




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///if playing game, display power and timer   



draw_set_color(c_red);
draw_text(100,100, string(global.musicVolume));

 if (room == rm_field)
 {  
     power_system();
 
 
      seconds += 1/room_speed;
                
    if (seconds &lt; 60)  &amp;&amp; (seconds &gt; 59.9)
    {
    seconds = 0;
    minutes += 1;
    }
}
else
{
    ellipseStep += 0.15
   logoAnimationX = centerX + majorAxis*cos(ellipseStep)*cos(radAngle) - minorAxis*sin(ellipseStep)*sin(radAngle);
   logoAnimationY = centerY - majorAxis*cos(ellipseStep)*sin(radAngle) - minorAxis*sin(ellipseStep)*cos(radAngle);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    //options menu variables, have to carry over from menu after that gets destroyed
    
    if !audio_music_is_playing()
{
    audio_play_music(snd_deus_ex_James, true);
}

    if (display_get_height() &lt; 760)
    {
        window_set_size( 800, 600 );
    }

    //controls
    global.input = "keyboard";
    
    //these global variables control the sound levels and difficulty level
    global.difficultyLevel = 100;
    global.musicVolume = 100;
    global.SFXVolume = 100;
    
    global.difficultySliderLeftX  = 588;
    global.musicSliderLeftX = 794;
    global.SFXSliderLeftX = 794;
    
    powerLevel = 240;
    enemyPowerLevel = 784;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draws most elements of the interface



if (room == rm_menu)
{
    //draw the logo and main menu flare
    draw_sprite(spr_menu_James, 0, 0, 0);
    image_speed = .60;  
    
    draw_sprite(spr_logo_James, -1, centerX, centerY);
    image_xscale = -1;  
    
    //hide the ball when it goes 'behind' the logo
    if (logoAnimationX &gt; 490) or (logoAnimationY &lt; 148) or (logoAnimationY &gt; 215)
    {
        //draw ball spinning aroudn O in PONG
        draw_sprite(spr_ball_player_James, 0, logoAnimationX, logoAnimationY);
       
    }

    draw_sprite_ext( spr_menu_James, 0, 1024, 0, -1, 1, 0, -1, 1 );

}

if (room == rm_field)
{


        
            if chargeMeter &gt; 0
            {    
                   //charge meter, drawn with 8 lines
                if chargeMeter &gt; 273
                {
                    draw_line_width_color(273, 690, chargeMeter + 9, 690, 7, c_orange, c_red);  
                    draw_line_width_color(chargeMeter + 9,  690, chargeMeter + 15, 697, 4, c_red, c_red);
                }
                if chargeMeter &gt; 187
                {
                    draw_line_width_color(187, 697, chargeMeter + 15, 697, 7, c_yellow, c_red);
                    draw_line_width_color(chargeMeter + 15,  697, chargeMeter + 23, 704, 4, c_red, c_red);  
                }
                if chargeMeter &gt; 129
                {
                    draw_line_width_color(129, 704, chargeMeter + 23, 704, 7, c_yellow, c_red);  
                    draw_line_width_color(chargeMeter + 23,  704, chargeMeter + 28, 711, 4, c_red, c_red);
                }    
                if chargeMeter &gt; 87
                {
                    draw_line_width_color(87, 711, chargeMeter + 28, 711, 7, c_yellow, c_red); 
                    draw_line_width_color(chargeMeter + 28,  711, chargeMeter + 31, 718, 4, c_red, c_red); 
                }      
                if chargeMeter &gt; 58
                {
                    draw_line_width_color(58, 718, chargeMeter + 31, 718, 7, c_yellow, c_red);
                    draw_line_width_color(chargeMeter + 31,  718, chargeMeter + 33, 725, 4, c_red, c_red);
                }            
                if chargeMeter &gt; 30 
                {
                    draw_line_width_color(30, 725, chargeMeter + 33, 725, 7, c_yellow, c_red);
                    draw_line_width_color(chargeMeter + 33,  725, chargeMeter + 36, 732, 4, c_red, c_red);
                }           
                if chargeMeter &gt; 15
                {
                    draw_line_width_color(15, 732, chargeMeter + 36, 732, 7, c_yellow, c_red);
                    draw_line_width_color(chargeMeter + 36,  732, chargeMeter + 38, 743, 4, c_red, c_red);
                }
                if chargeMeter &gt; 6
                {
                    draw_line_width_color(6,  739, chargeMeter + 38, 739, 7, c_yellow, c_red);
                }
            }
                       
     if (global.holdGlow == true) and (global.input != "mouse")
    {   
        
       // draw_set_alpha(0.55);
        //draw_set_color(c_lime);
        
        //draw crosshair
        draw_line_width_color(obj_paddle_player_James.x, obj_paddle_player_James.y,mouse_x,mouse_y, 2, c_red , c_maroon); 
        
    }
    
    draw_set_alpha(1);
    
    //draw power bar - player, x variable cant be more than 490
    draw_set_color(bluish);
    draw_rectangle(0, 743, powerLevel, 769, false);
    
    //draw power bar - computer, x variable cant be less than 535
    draw_set_color(c_fuchsia);
    draw_rectangle(1024, 743, enemyPowerLevel, 769, false);
        
    //draw middle line
    draw_sprite(spr_middle_line_James, 0, 490 , 99);
    
    draw_set_halign(fa_left);
    draw_set_valign(fa_left);
    
    
    
    //custom color, neon blue, draw player 1 top left
    
    draw_set_font(fnt_names);
    draw_set_color(bluish);
    draw_text(126,20, "Player 1");
    
    
    //change font color and draw computer top right
    draw_set_color(c_fuchsia);
    draw_text(689, 20, "Computer");
    draw_set_font(fnt_menu_score_James);
    
    //code for drawing score
    
    draw_text_transformed_color(544, 130, string(global.enemyScore) , 1, 1, 0, c_lime, c_lime, c_teal, c_teal, 0.85);
    
    draw_set_halign(fa_right);
    draw_text_transformed_color(487, 130, string(global.playerScore), 1, 1, 0, c_lime, c_lime, c_teal, c_teal, 0.85);
    

    
    //code for drawing the timer
    draw_set_font(fnt_names);
    draw_set_color(c_lime);
    
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    
        if (seconds &lt; 10) 
        {
            draw_text_transformed(524, 48, "0" + string(minutes) + ":0" + string(seconds), 0.9, 0.9, 0);
           
        }
        else if (seconds &gt;= 10) 
        {
            draw_text_transformed(524, 48, "0" + string(minutes) + ":" + string(seconds) , 0.9, 0.9, 0);
    
        }

  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create pause menu object that will pause the game
if (room = rm_field)
{


    var pauseGame;
    pauseGame = instance_create(0,0, obj_pause_menu_James);
    with (pauseGame)
    {
        global.gameEnding = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
