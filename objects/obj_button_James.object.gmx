<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_button_James</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1001</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///just tell set glow to 0
glow=0;
type_Toggle = false;
bigButton = true;
unfocused = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///buttons dont glow when moused over
if (unfocused == true)
{
    exit;
}

if (type_Toggle) 
{
    if (action == "mouse") and (global.input == "mouse")
    {
        glow = true;
    }
    
    else if (action == "keyboard") and (global.input == "keyboard")
    {
        glow = true;
    }
    else
    {
        glow = false;
    }
    
    
    exit;
}
//defining the objects region - different size depending on room
var left,right,top,bottom;

if (room == rm_menu) and (action != "play")
{
    left=x-sprite_xoffset+30;
    right=x-sprite_xoffset+sprite_width-30;
    top=y-sprite_yoffset+35;
    bottom=y-sprite_yoffset+sprite_height-40;
}
else if (room == rm_field)
{
    left=x-sprite_xoffset +63;
    right=x-sprite_xoffset+sprite_width -63;
    top=y-sprite_yoffset+35;
    bottom=y-sprite_yoffset+sprite_height-40;
}
else if (action == "play")
{
    left=x-sprite_xoffset+30;
    right=x-sprite_xoffset+sprite_width-30;
    top=y-sprite_yoffset+25;
    bottom=y-sprite_yoffset+sprite_height-23;
}

//if mouse is inside the objects region, glow
  if(left&lt;mouse_x) and (mouse_x&lt;right) and (top&lt;mouse_y) and (mouse_y&lt;bottom)
  {

         glow = 1;
  }
  //variables are only set for last instance, adjust the missing distance and set cursor to normal
  else if (top - 170 &gt; mouse_y) or (bottom -50 &lt; mouse_y) and (action != "done")
  {
        glow = 0;

  }
  //always un glow even if the cursor is on select mode
  else
  {
         
         glow = 0;
  }

  if (mouse_y &lt; 763) and (mouse_x &gt; 405) and (mouse_y &gt; 460) and (mouse_x &lt; 620)
  {
        window_set_cursor(cr_handpoint);
  }
  else
  {
        window_set_cursor(cr_default);
  }
    
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (type_Toggle) or (glow == 1) and (unfocused == false)
{
    switch (action)
    {
    //five main menu buttons v
        case "play":
             room_goto(rm_field);
             with (obj_interface_James)
             {
                instance_destroy();
                instance_create(0,0, obj_interface_James);
                powerLevel = 240;
                enemyPowerLevel = 784;    
             }

             break;
            
        case "options":
             instance_create(0, 0, obj_options_menu_James);
             break;
             
         case "credits":
             instance_create(0,0, obj_credits_instruction_menu_James);
             obj_credits_instruction_menu_James.credits = true;
             break;
         
         case "how to play":
             instance_create(0,0, obj_credits_instruction_menu_James);
             obj_credits_instruction_menu_James.page = 2;
             obj_credits_instruction_menu_James.instructions = true;
             break;  
             
         case "quit":
             //game_end();
             var newMessage;
             newMessage = instance_create(0,0, obj_message_James);
             with (newMessage)
             {
                message = "quit";
                
                
             }
             break;
    //main menu buttons ^              
            
            //resume just closes pause menu
        case "resume":
             with(obj_pause_menu_James) {event_perform(ev_keypress, vk_escape);}
             break;
            
            //main menu button closes the pause menu returns to main menu
        case "main menu":
             var newMessage;
             newMessage = instance_create(0,0, obj_message_James);
             with (newMessage)
             {
                message = "leave";
                
             }
              break;
                    
            //just closes the options menu
        case "done":
             with(obj_options_menu_James) { event_perform(ev_keypress, vk_escape); }
             break;
             
        case "mouse":
             global.input = "mouse";
             break;
             
        case "keyboard":
             global.input = "keyboard";
             break;
             
        case "back":
            with(obj_credits_instruction_menu_James){event_perform(ev_keypress, vk_escape);}
            break;
            
        case "yes":
            if (obj_message_James.message == "quit")
            {
            game_end();
            }
            else if (obj_message_James.message == "leave")
            {
              with(obj_pause_menu_James){event_perform(ev_keypress, vk_escape);}
              room_goto(rm_menu);
              part_system_destroy(obj_particle_trail_James.trail);
              part_system_destroy(obj_particle_trail_James.bounce);
              part_system_destroy(obj_particle_trail_James.blast);
            }
            else if (obj_message_James.message == "end")
            {
             
                with(obj_pause_menu_James){event_perform(ev_keypress, vk_escape);}
                global.playerScore = 0;
                global.enemyScore = 0;
                with(obj_interface_James) {instance_destroy();}
                game_restart();               
                room_goto(rm_field);
                part_system_destroy(obj_particle_trail_James.trail);
                part_system_destroy(obj_particle_trail_James.bounce);
                part_system_destroy(obj_particle_trail_James.blast);
                with(obj_message_James){event_perform(ev_keypress, vk_escape);}
            }
                
            break;
        
        case "no":
            if (obj_message_James.message == "end")
            {
                global.playerScore = 0;
                global.enemyScore = 0;
                with(obj_pause_menu_James) {event_perform(ev_keypress, vk_escape);}
                room_goto(rm_menu);
                part_system_destroy(obj_particle_trail_James.trail);
                part_system_destroy(obj_particle_trail_James.bounce);
                part_system_destroy(obj_particle_trail_James.blast);
            }
        
            with(obj_message_James){event_perform(ev_keypress, vk_escape);}
            break;
            
            case "next":
            obj_credits_instruction_menu_James.page += 1;
                 var newButton;
                 newButton = instance_create(272, 610, obj_button_James);
                 with (newButton)
                    {
                        action = "previous";
                        bigButton = true;
    
                        depth = -1003;
                    }
            break;
            
            case "previous":
            obj_credits_instruction_menu_James.page -= 1;
            newButton = instance_create(750, 610, obj_button_James);
             with (newButton)
             {
                    action = "next";
                    bigButton = true;

                     depth = -1003;
              }
            break;

    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw regular main menu buttons
if (bigButton == true) and (action != "play")
{
    draw_sprite_ext(sprite_index,glow,x,y, 0.75, 0.62, 0, -1, 1);
    //draw_sprite(sprite_index,glow,x,y);
    draw_set_font(fnt_menu_score_James);
    draw_set_halign(fa_center);
    //draw_text_color(x, y+5, string(action),   c_red, c_maroon, c_fuchsia, c_fuchsia,  .7);
    //draw_text_ext_transformed_color(x, y+5, string(action) , 5, 25, 0.33, 0.33, 0, c_red, c_maroon, c_fuchsia, c_fuchsia, 1);
    
    draw_text_transformed_color(x, y+5, string(action), 0.18, 0.20, 0, c_red, c_maroon, c_fuchsia, c_fuchsia, 0.67);
}

//draw smaller pause menu buttons
else if (bigButton == false)
{
    draw_sprite_ext(sprite_index,glow,x,y, 0.65, 0.65, 0, -1, 1);
    draw_set_font(fnt_menu_score_James);
    draw_set_halign(fa_center);
    draw_text_transformed_color(x, y+5, string(action), 0.211, 0.211, 0, c_purple, c_purple, c_red, c_red, 0.9);
}
else if (action == "play")
{
    draw_sprite(sprite_index,glow,x,y);
    draw_set_font(fnt_menu_score_James);
    draw_set_halign(fa_center);
    draw_text_transformed_color(x, y+5, string(action), 0.315, 0.315, 0, c_red, c_maroon, c_fuchsia, c_fuchsia, 0.67);
}

draw_set_alpha(1);
draw_set_halign(fa_center);
draw_set_valign(fa_center);





</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>156,156</point>
  </PhysicsShapePoints>
</object>
